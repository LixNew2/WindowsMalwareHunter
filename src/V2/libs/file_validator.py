#---------------------------------------------------
#JVA-01 | BOTTON Gael | 03-08-2024 | v.1.2
#---------------------------------------------------

import pefile, subprocess, libs.errors as ers

class FILEValidator:
    def __init__(self, SIGCHECK, SIGNTOOL):
        self.SIGCHECK = SIGCHECK
        self.SIGNTOOL = SIGNTOOL

    def is_pe(self, file_path : str) -> bool:
        try:
            pe = pefile.PE(file_path)
            return True if pe.is_exe else False
        except:
            return False

    def is_signed(self, file_path : str) -> bool:
        try:
            result = subprocess.Popen(self.SIGCHECK + " " + '"' + file_path + '"', shell=False, stdout=subprocess.PIPE)
            output = result.stdout.read().decode('latin-1')
            output = output.split("\n")

            for line in output:
                if "Verified:" in line:
                    return True if "Signed" in line else False
            return False
        except:
            return False
  
    def sign_file(self, file_path : str, certificate_path : str, certificate_pdw : str, encryption_algorithm : str = "SHA256") -> None:
        if self.is_pe(file_path) != True:
            raise ers.NotPEFileError(file_path)
        
        if self.is_signed(file_path):
            raise ers.AlreadySignedError(file_path)
        
        try:
            subprocess.Popen('"' + self.SIGNTOOL + '"' + " sign /fd " + encryption_algorithm + ' /f "' + certificate_path + '"' 
                             + ' /p "' + certificate_pdw + '" ' + '"' + file_path + '"', shell=False, stdout=subprocess.PIPE)
            print(file_path.split("/")[-1] + " signed !")
        except:
            raise ers.SignatureError(file_path)
        
if __name__ ==  "__main__":
    pe = FILEValidator("./tools/sigcheck64.exe", "./tools/signtool.exe")