#---------------------------------------------------
#PY-01 | LixNew | 03-14-2024 | v.1.3
#---------------------------------------------------

#Import
import vt, os, shutil, datetime, vonage, subprocess
import libs.file_validator as fv

#Config
CONFIG_FILE = "./config/config.cfg"
QUARANTINE_DIR = "./quarantine"
DATA = "./data"
LOGS = "./logs"

#VirusTotal config
API_KEY = ""
client = vt.Client(API_KEY)

#Vonage config
VONAGE = vonage.Client(key="", secret="")
sms = vonage.Sms(VONAGE)

#File validator config
SIGCHECK = "./tools/sigcheck64.exe"
SIGNTOOL = "./tools/signtool.exe"
FV = fv.FILEValidator(SIGCHECK, SIGNTOOL)

def make_dir(path : str, type = 0):
    if os.path.exists(path) != True:
        os.mkdir(path)

    if type != 0:
        open(LOGS + "/log.log", "w").close()

make_dir(QUARANTINE_DIR)
make_dir(DATA)
make_dir(LOGS, 1)

def virus_check(config):
    scan_elements = []
    analysis_json = ""

    for e in config:
        e = e.replace("\\", "/")
        for element in os.listdir(e):
            element_path = os.path.join(e, element).replace("\\", "/")
            if os.path.isfile(element_path):

                if checkFile(element_path, scan_elements):
                    continue

                with open(element_path, "rb") as file:
                    analysis = client.scan_file(file, wait_for_completion=True)
                analysis_json = analysis.to_dict()
                check_suspicous_files(analysis_json, scan_elements, element_path)
                with open(DATA + "/" + element +"-" + str(datetime.datetime.now()).replace(" ", "-").replace(":", "-") + ".dat", "w") as data:
                    data.write(str(analysis_json)) 
            else:
                 for root, dirs, files in os.walk(element_path):
                    for file in files:
                        file_path = os.path.join(root, file).replace("\\", "/")

                        if checkFile(file_path, scan_elements):
                            continue

                        with open(file_path, "rb") as file:
                            analysis = client.scan_file(file, wait_for_completion=True)
                        analysis_json = analysis.to_dict()
                        check_suspicous_files(analysis_json, scan_elements, file_path)
                        with open(DATA + "/" + element +"-" + str(datetime.datetime.now()).replace(" ", "-").replace(":", "-") + ".dat", "w") as data:
                            data.write(str(analysis_json))   
         
    client.close()

    for element in scan_elements:
        try:
            shutil.move(element, QUARANTINE_DIR)
        except:
            pass
        with open(LOGS + "/log.log", "a") as log:
            log.write(str(datetime.datetime.now()) + " : " + element +  " -> " + os.path.abspath(QUARANTINE_DIR) + "\n")

    if len(scan_elements) > 0:
        try:
            message = "Scanning to detect one or more malicious files.\nThey have been quarantined.\nFiles :\n- " + "\n- ".join(scan_elements)
            responseData = sms.send_message(
            {
                "from": "Vonage APIs",
                "to": "",
                "text": message
                }
            )

            if responseData["messages"][0]["status"] == "0":
                print("Message sent successfully.")
            else:
                print(f"Message failed with error: {responseData['messages'][0]['error-text']}")
        except:
            pass
    else:
        print("No suspicious files found.\nAnalysis completed.")

def checkFile(element_path : str, scan_elements : list):
    if FV.is_signed(element_path) != True:
        if FV.is_pe(element_path):
            scan_elements.append(element_path)
            print("Suspicious file found : " + element_path)
            return True
        else:
            return False
    else:
        return True
    
def check_suspicous_files(analysis_json : dict, scan_elements : list, element_path : str):
    if analysis_json['attributes']['stats']['malicious'] > 0 or analysis_json['attributes']['stats']['suspicious'] > 0:
        scan_elements.append(element_path)
        print("Suspicious file found : " + element_path)
    else:
        check_ADS(element_path)

def check_ADS(file_path):
    file_dir = os.path.dirname(file_path)
    file_name = os.path.basename(file_path)
    os.chdir(file_dir)
    
    streams = []

    try:
        result = subprocess.Popen(["cmd", "/c", f"dir /r {file_name}"], shell=False, stdout=subprocess.PIPE)
        output = result.stdout.read().decode('latin-1')
        output = output.split("\n")

        for info in output:
            if "$DATA" in info:
                stream = info.replace("\r", "").replace(" ", "")
                streams.append(stream.split(":")[1])
    except:
        pass

    if len(streams) != 0:
        log_content = str(datetime.datetime.now()) + " : " + "WARNING : " + file_path +  " as " + str(len(streams)) + " Streams ! | Name of its Streams : " + ", ".join(streams) + "\n"
        with open(LOGS + "/log.log", "a") as log:
            log.write(log_content)
        print("WARNING ! " + str(len(streams)) +" ADS found in file : " + file_path)

def read_config() -> list:
    with open(CONFIG_FILE, "r") as cfg:
        return cfg.readlines()

if __name__ == "__main__":
    print("Analysis in progress...")
    virus_check(read_config())